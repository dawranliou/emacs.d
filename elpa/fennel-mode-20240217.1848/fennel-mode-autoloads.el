;;; fennel-mode-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from antifennel.el

(autoload 'antifennel-mode "antifennel" "\
Quickly turn Lua code into Fennel.

This is a minor mode.  If called interactively, toggle the
`Antifennel mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `antifennel-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'antifennel-buffer "antifennel" "\
Compile the contents of the current buffer's file from Lua to Fennel." t)
(autoload 'antifennel-region "antifennel" "\
Compile the region of the current buffer's file from Lua to Fennel.

(fn BEG END)" t)
(register-definition-prefixes "antifennel" '("antifennel-"))


;;; Generated autoloads from fennel-mode.el

(autoload 'fennel-mode "fennel-mode" "\
Major mode for editing Fennel code.

\\{fennel-mode-map}

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.fnl\\'" . fennel-mode))
(add-to-list 'interpreter-mode-alist '("fennel" . fennel-mode))
(autoload 'fennel-repl "fennel-mode" "\
Switch to the fennel REPL, or start a new one if needed.

If there was a REPL buffer but its REPL process is dead,
a new one is started in the same buffer.

If invoked interactively with a prefix argument, asks for COMMAND
to start the REPL.  If optional BUFFER is supplied it is used as
the last buffer before starting the REPL.

The command is persisted as a buffer-local variable, the REPL
buffer remembers the command that was used to start it.
Resetting the command to another value can be done by invoking by
using a prefix argument.

Return the REPL buffer.

(fn COMMAND &optional BUFFER)" t)
(autoload 'fennel-repl-redirect-one "fennel-mode" "\
Redirect the result of one EXPR to OUTBUF, return the redirection buffer.

PROC must be an active Fennel REPL process.  If OUTBUF is not
provided a difault fennel redirection buffer is created.

Can block Emacs if redirected command takes too long to execute.
Handles redirection cleanup in case of quit, waits for the
result.

(fn PROC EXPR &optional OUTBUF)")
(autoload 'fennel-repl-mode "fennel-mode" "\
Major mode for Fennel REPL.

\\{fennel-repl-mode-map}

(fn)" t)
(register-definition-prefixes "fennel-mode" '("fennel-"))


;;; Generated autoloads from fennel-proto-repl.el

(defvaralias 'fennel-eldoc-fontify-markdown 'fennel-proto-repl-eldoc-fontify-markdown)
(autoload 'fennel-proto-repl-send-message "fennel-proto-repl" "\
Send OP and DATA as a message to the REPL process.
Attaches CALLBACK to the message ID.  OP must be a keyword or
nil.  If the OP is nil sends the DATA as is without formatting it
as a message.

Passes a list of values to the CALLBACK, representing values from
the executed code.  Each value is a serialized string.

If the optional argument ERROR-CALLBACK is passed, REPL will use
it to handle errors.  The ERROR-CALLBACK must accept three
arguments: the error type, error message, and stack trace.

If the optional argument PRINT-CALLBACK is passed, REPL will use
it to handle print operations.  The PRINT-CALLBACK must accept at
least one argument, which is a text to be printed.

(fn OP DATA CALLBACK &optional ERROR-CALLBACK PRINT-CALLBACK)")
(autoload 'fennel-proto-repl-send-message-sync "fennel-proto-repl" "\
Send the message to the REPL process synchronously.
OP must be a keyword or nil.  OP and DATA are formatted as a
message unless OP is nil.

Return a list of strings, representing values from the executed
code.  If an error occurs during execution returns nil.  Accepts
optional ERROR-CALLBACK and PRINT-CALLBACK.  See
`fennel-proto-repl-send-message' for information on additional
callbacks.

(fn OP DATA &optional ERROR-CALLBACK PRINT-CALLBACK TIMEOUT)")
(autoload 'fennel-proto-repl-minor-mode "fennel-proto-repl" "\
Fennel Proto REPL interaction mode.

\\{fennel-proto-repl-minor-mode-map}

This is a minor mode.  If called interactively, toggle the
`Fennel-Proto-Repl minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `fennel-proto-repl-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'fennel-proto-repl "fennel-proto-repl" "\
Start a new Fennel Proto REPL.

If invoked interactively with a prefix argument, asks for COMMAND
to start the REPL.  If optional REPL-BUFFER is supplied it is
used as the buffer to start the REPL in.

The command is persisted as a buffer-local variable, the REPL
buffer remembers the command that was used to start it.
Resetting the command to another value can be done by invoking it
by using a prefix argument.

Multiple REPLs are possible and new sessions can be created by
simply calling this function.  Once the new REPL is created, the
current buffer is linked with it, and all in-buffer commands
start working in terms of the new REPL process.  To change what
REPL is used for the current buffer using the
`fennel-proto-repl-link-buffer' function.

Return the REPL buffer.

(fn COMMAND &optional REPL-BUFFER)" t)
(autoload 'fennel-proto-repl-mode "fennel-proto-repl" "\
Major mode for Fennel Proto REPL.

\\{fennel-proto-repl-mode-map}

(fn)" t)
(register-definition-prefixes "fennel-proto-repl" '("fennel-proto-repl-"))


;;; Generated autoloads from fennel-scratch.el

(autoload 'fennel-scratch "fennel-scratch" "\
Create or open an existing scratch buffer for Fennel evaluation.
With prefix argument ASK-FOR-COMMAND? asks for the command to
start the REPL process.

(fn &optional ASK-FOR-COMMAND?)" t)
(register-definition-prefixes "fennel-scratch" '("fennel-scratch-"))


;;; Generated autoloads from ob-fennel.el

(register-definition-prefixes "ob-fennel" '("ob-fennel-" "org-babel-"))

;;; End of scraped data

(provide 'fennel-mode-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; fennel-mode-autoloads.el ends here
