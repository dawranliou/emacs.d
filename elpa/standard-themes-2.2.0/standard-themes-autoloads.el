;;; standard-themes-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from standard-themes.el

(autoload 'standard-themes-select "standard-themes" "\
Load a Standard THEME using minibuffer completion.
Run `standard-themes-after-load-theme-hook' after loading the theme.
Disable other themes per `standard-themes-disable-other-themes'.

(fn THEME)" t)
(autoload 'standard-themes-toggle "standard-themes" "\
Toggle between the two `standard-themes-to-toggle'.
If `standard-themes-to-toggle' does not specify two Standard themes,
inform the user about it while prompting with completion for a theme
among our collection (this is practically the same as the
`standard-themes-select' command).

Run `standard-themes-post-load-hook' after loading the theme." t)
(autoload 'standard-themes-rotate "standard-themes" "\
Rotate to the next theme among THEMES.
When called interactively THEMES is the value of `standard-themes-to-rotate'.

If the current theme is already the next in line, then move to the one
after.  Perform the rotation rightwards, such that the first element in
the list becomes the last.  Do not modify THEMES in the process.

(fn THEMES)" t)
(autoload 'standard-themes-theme "standard-themes" "\
Bind NAME's color PALETTE around face specs and variables.
Face specifications are passed to `custom-theme-set-faces'.
While variables are handled by `custom-theme-set-variables'.
Those are stored in `standard-themes-faces' and
`standard-themes-custom-variables' respectively.

Optional OVERRIDES are appended to PALETTE, overriding
corresponding entries.

(fn NAME PALETTE &optional OVERRIDES)" nil t)
(function-put 'standard-themes-theme 'lisp-indent-function 0)
(when load-file-name (let ((dir (file-name-directory load-file-name))) (unless (file-equal-p dir (expand-file-name "themes/" data-directory)) (add-to-list 'custom-theme-load-path dir))))
(register-definition-prefixes "standard-themes" '("standard-themes-"))

;;; End of scraped data

(provide 'standard-themes-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; standard-themes-autoloads.el ends here
