(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(auth-sources '("~/.authinfo.gpg"))
 '(auto-revert-avoid-polling t)
 '(auto-revert-check-vc-info t)
 '(auto-revert-stop-on-user-input nil)
 '(auto-save-file-name-transforms '((".*" "~/.emacs.d/var/auto-save" t)))
 '(auto-save-list-file-prefix "~/.emacs.d/var/auto-save/")
 '(backup-by-copying t)
 '(backup-by-copying-when-linked t)
 '(backup-directory-alist '(("." . "~/.emacs.d/var/backup/")))
 '(blink-matching-paren nil)
 '(calendar-mark-holidays-flag t)
 '(column-number-mode t)
 '(comint-buffer-maximum-size 2048)
 '(comint-prompt-read-only t)
 '(comment-empty-lines t)
 '(confirm-kill-emacs 'yes-or-no-p)
 '(confirm-nonexistent-file-or-buffer nil)
 '(create-lockfiles nil)
 '(cursor-in-non-selected-windows nil)
 '(custom-safe-themes
   '("14436a10b0cb5b7b6e6f6d490a08c1a751ad0384e9b124b9b8d5d554129f5571" default))
 '(delete-by-moving-to-trash t)
 '(delete-old-versions t)
 '(echo-keystrokes 0.2)
 '(ediff-split-window-function 'split-window-sensibly)
 '(eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly)
 '(enable-recursive-minibuffers t)
 '(fast-but-imprecise-scrolling t)
 '(ffap-machine-p-known 'reject)
 '(fill-column 80)
 '(find-file-suppress-same-file-warnings t)
 '(find-file-visit-truename t)
 '(find-ls-option '("-print0 | xargs -0 gls -alhd" . "-ld"))
 '(frame-resize-pixelwise t)
 '(global-auto-revert-non-file-buffers t)
 '(grep-find-command '("rg -n -H --no-heading -e ''" . 27))
 '(groovy-indent-offset 2)
 '(helpful-switch-buffer-function #'helpful-switch-to-buffer)
 '(history-length 300)
 '(hscroll-margin 2)
 '(hscroll-step 1)
 '(idle-update-delay 1.0)
 '(indicate-empty-lines t)
 '(inhibit-startup-screen t)
 '(initial-major-mode 'fundamental-mode)
 '(initial-scratch-message nil)
 '(kept-new-versions 5)
 '(kept-old-versions 5)
 '(kill-buffer-delete-auto-save-files t)
 '(kill-do-not-save-duplicates t)
 '(make-backup-files t)
 '(mode-line-compact 'long)
 '(modus-themes-mixed-fonts t)
 '(mouse-wheel-flip-direction t)
 '(mouse-wheel-scroll-amount
   '(2
     ((shift)
      . hscroll)
     ((meta))
     ((control meta)
      . global-text-scale)
     ((control)
      . text-scale)))
 '(mouse-wheel-scroll-amount-horizontal 2)
 '(mouse-wheel-tilt-scroll t)
 '(next-error-message-highlight t)
 '(ns-use-proxy-icon nil t)
 '(org-adapt-indentation nil)
 '(org-agenda-files '("~/org/journal/journal.org"))
 '(org-agenda-span 'day)
 '(org-agenda-start-with-log-mode t)
 '(org-agenda-time-grid
   '((daily today require-timed)
     (600 1600)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
 '(org-agenda-window-setup 'current-window)
 '(org-attach-auto-tag "attachment")
 '(org-babel-load-languages
   '((emacs-lisp . t)
     (sql . t)
     (awk . t)
     (shell . t)
     (clojure . t)))
 '(org-capture-templates
   '(("t" "Todo" entry
      (file+olp+datetree "~/org/journal/journal.org")
      "* TODO %?\12SCHEDULED: %t\12" :clock-in t :clock-resume t :tree-type week)
     ("p" "Project" entry
      (file+olp "~/org/journal/journal.org" "Projects")
      (file "~/.emacs.d/org-templates/project.org")
      :clock-in t :clock-resume t)
     ("j" "Journal" entry
      (file+olp+datetree "~/org/journal/journal.org")
      "* %? %^G\12" :clock-in t :clock-keep t :tree-type week)
     ("d" "Daily Review" entry
      (file+olp+datetree "~/org/journal/journal.org")
      (file "~/.emacs.d/org-templates/daily-review.org")
      :immediate-finish t :clock-in t :clock-keep t :tree-type week)
     ("i" "Check In" entry
      (file+olp+datetree "~/org/journal/journal.org")
      (file "~/.emacs.d/org-templates/check-in.org")
      :immediate-finish t :clock-in t :clock-keep t :tree-type week)
     ("m" "Meeting" entry
      (file+olp+datetree "~/org/journal/journal.org")
      "* %^{Meeting} :meeting:%^G\12" :immediate-finish t :clock-in t :clock-keep t :tree-type week)))
 '(org-clock-clocked-in-display nil)
 '(org-clock-clocktable-default-properties '(:maxlevel 4))
 '(org-confirm-babel-evaluate nil)
 '(org-cycle-hide-block-startup nil)
 '(org-cycle-separator-lines 2)
 '(org-default-notes-file "~/org/journal/inbox.org")
 '(org-directory "~/org")
 '(org-ellipsis " ⤵ ")
 '(org-export-with-sub-superscripts '{})
 '(org-fontify-done-headline nil)
 '(org-goto-interface 'outline-path-completion)
 '(org-hide-block-startup nil)
 '(org-hide-emphasis-markers t)
 '(org-image-actual-width '(640))
 '(org-indirect-buffer-display 'current-window)
 '(org-log-done 'time)
 '(org-log-into-drawer t)
 '(org-modules
   '(ol-bbdb ol-bibtex ol-docview ol-doi ol-eww ol-gnus org-habit ol-info ol-irc ol-mhe ol-rmail ol-w3m))
 '(org-outline-path-complete-in-steps nil)
 '(org-refile-allow-creating-parent-nodes 'confirm)
 '(org-refile-targets '((nil :maxlevel . 9) (org-agenda-files :maxlevel . 9)))
 '(org-refile-use-outline-path 'file)
 '(org-special-ctrl-a/e 'reversed)
 '(org-src-fontify-natively t)
 '(org-src-preserve-indentation nil)
 '(org-src-tab-acts-natively t)
 '(org-src-window-setup 'current-window)
 '(org-startup-folded 'content)
 '(org-todo-keyword-faces
   '(("NEXT" . "blue")
     ("REVIEW" . "dark orange")
     ("HOLD" . "purple")
     ("CANCELLED" . "teal")))
 '(org-todo-keywords
   '((sequence "TODO(t@/)" "NEXT(n)" "REVIEW(r@/!)" "|" "DONE(d!)")
     (sequence "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))
 '(org-use-speed-commands t)
 '(package-archive-priorities '(("melpa" . 30) ("gnu" . 20) ("nongnu" . 10)))
 '(package-archives
   '(("gnu" . "https://elpa.gnu.org/packages/")
     ("nongnu" . "https://elpa.nongnu.org/nongnu/")
     ("melpa" . "https://melpa.org/packages/")))
 '(package-native-compile t)
 '(package-selected-packages
   '(esup eglot gotest dape nerd-icons-dired nerd-icons-completion nerd-icons-corfu nerd-icons dired-subtree multiple-cursors ox-gfm avy cape casual-dired cider clojure-mode clojure-ts-mode clojure-ts-mode consult corfu csv-mode docker dockerfile-mode dumb-jump eat edit-indirect eglot-booster embark embark-consult fennel-mode flyspell gnuplot go-mode groovy-mode helpful hide-mode-line iedit jarchive jdecomp jinx kotlin-mode lua-mode magit marginalia markdown-mode markdown-toc ob-restclient orderless org pulsar rainbow-mode restclient rg sly sqlformat standard-themes tb-keycast verb vertico websocket which-key ws-butler yaml-mode zig-mode))
 '(package-vc-selected-packages
   '((go-mode :vc-backend Git :url "https://github.com/dominikh/go-mode.el")
     (tb-keycast :vc-backend Git :url "https://github.com/ir33k/tb-keycast.git")
     (eglot-booster :vc-backend Git :url "https://github.com/jdtsmith/eglot-booster")
     (clojure-ts-mode :url "https://github.com/clojure-emacs/clojure-ts-mode" :vc-backend Git)))
 '(project-vc-extra-root-markers '(".project"))
 '(recentf-max-saved-items 300)
 '(register-preview-delay 0.5)
 '(revert-without-query '("."))
 '(ring-bell-function 'flash-mode-line)
 '(save-place-limit 600)
 '(savehist-additional-variables
   '(kill-ring mark-ring global-mark-ring search-ring regexp-search-ring))
 '(savehist-save-minibuffer-history t)
 '(scroll-conservatively 10000)
 '(scroll-error-top-bottom t)
 '(scroll-preserve-screen-position t)
 '(scroll-step 1)
 '(show-paren-context-when-offscreen 'overlay)
 '(show-paren-when-point-in-periphery t)
 '(show-paren-when-point-inside-paren t)
 '(tab-always-indent t)
 '(tab-width 8)
 '(tramp-auto-save-directory "~/.emacs.d/var/tramp-auto-save/")
 '(tramp-backup-directory-alist '(("." . "~/.emacs.d/var/backup/")))
 '(tramp-default-method "ssh")
 '(truncate-lines t)
 '(truncate-partial-width-windows nil)
 '(uniquify-buffer-name-style 'post-forward-angle-brackets nil (uniquify))
 '(uniquify-ignore-buffers-re "\"^\\\\*\"")
 '(uniquify-separator "•")
 '(vc-follow-symlinks t)
 '(version-control t)
 '(visible-bell nil)
 '(wgrep-auto-save-buffer t)
 '(window-divider-default-bottom-width 1)
 '(window-divider-default-places t)
 '(window-divider-default-right-width 1)
 '(word-wrap t)
 '(x-stretch-cursor t)
 '(xref-search-program 'ripgrep)
 '(xref-show-definitions-function 'consult-xref))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(eglot-highlight-symbol-face ((t (:inherit lazy-highlight))))
 '(elisp-shorthand-font-lock-face ((t (:inherit font-lock-keyword-face :weight bold))))
 '(org-block ((t (:inherit fixed-pitch :extend t))))
 '(org-checkbox ((t (:inherit (bold fixed-pitch)))))
 '(org-date ((t (:inherit fixed-pitch :foreground "Purple" :underline t))))
 '(org-document-info-keyword ((t (:inherit fixed-pitch))))
 '(org-drawer ((t (:inherit fixed-pitch :foreground "Blue1"))))
 '(org-ellipsis ((t (:underline t))))
 '(org-hide ((t (:inherit fixed-pitch :foreground "White"))))
 '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-property-value ((t (:inherit fixed-pitch))))
 '(org-special-keyword ((t (:inherit (font-lock-keyword-face fixed-pitch)))))
 '(org-table ((t (:inherit fixed-pitch))))
 '(org-verbatim ((t (:inherit fixed-pitch))))
 '(tab-bar ((t (:inherit fixed-pitch :background "grey85" :foreground "black"))))
 '(tab-bar-tab ((t (:inherit tab-bar :background "White" :box (:line-width (2 . 2) :color "White")))))
 '(tab-bar-tab-inactive ((t (:inherit tab-bar-tab :background "grey75" :box (:line-width (2 . -2) :color "grey75"))))))
